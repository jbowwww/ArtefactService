02/02/14 -
	After a lot of experimentation and having it working and breaking it again, it appears that all queries, counts, and method calls (like firstordefault()) work
	OfType<> also works, except that you have to call AsEnumerable() first or the service throws a NotSupportedException
		- It is a member of System.Linq.Enumerable
			- I think if I process the expression tree and look for the IQueryable`s and replace them with Enumerables
			  I should be able to omit calling AsEnumerable<> explicitly myself.
			  	- Not sure if I'd need to replace all, or just in some circumstances. e.g. As the first _argument_ (not instance) to
			  	  a method call that is declared in another class as an extension method. That is the circumstance in this case
			  	  although I don't know whether or not there are other conditions that cause the same problem
	
	Technical functionality is slowly getting there, but you could do with having a good think about how you want/expect/need
	clients to behave while working to generate and update artefacts.
		- e.g. Do you want inserts and updates to cascade automatically
		(and how does all that reeeally work), are the clients expected to explicitly add/update all their artefacts, at what point
		does the client and/or server (onus should probably be on client) check the repository for "new" (transient) artefacts attempting
		to be added to the repository when they actually refer to artefacts that do already have preexisting data.
		- How will it decide if artefacts' pre-existing data is outdated or invalid? I'm thinking a virtual function declared by Artefact class
		overridden by subclasses - e.g. File checks repo using 'Path', Disk checks repo using 'Serial#'
			- Also thinking a virtual method that determines if artefacts' data has changed from the preexisting data - avoiding updates if unnecessary
			- Similar approach may work for determining when/if deeper examinations are performed e.g. CRC on a file (checks repo for preexisting data from deeper examinations)
				- Some of these types of tasks may need running regularly, only occasionally, or even once-off

	The way File and Directories currently Update needs thinking about too - the way it checks/updates the Drive member.
	Similarly for the way the Drive class has a Disk member, and Disk Host, although for now they are just disabled
		- Each time one of these is updated it runs Disk.GetDrives again()!!
			- This should run at most once every x minutes (configurable), cache the drives between then. Or somehow know that
			it can query the repo for everything?? (Theorertically the repo should cache the results of queries anyway, ideally eventually
			on both server and client side) Currently though it calls System.IO.DriveInfo.GetDrives() to check all drives and
			find any that did not already exist in the repo. DEF don't wanna do that every time a File or Directory even updates
		- !! TODO: I think this might actualy be next - get Disk and Host working to the point where they appear in the DB

	Also look into exactly when/how many times/why Count() is called - you defined a property (not method) that should be able to
	cache this count, but if anything calls Enumerable.Count() it calls it anyway and executes on server
		- It must be possible to find expression trees whose outermost nodes are calls to Count() (and other things like First())
		  and then replace that call / instead of executing the expression replace it directly with the cached value from Artefacts.Services.Queryable.Count
			
------------------------------

30/12/13 -
	See Output/*.txt for successful test outputs
	About to attempt improving Artefacts.Drive class to include a disk serial number as reported by shell command:
		/sbin/udevadm info --query=property --name=sda
			- What does it report for non-HD partitions??
---------------------------------

02/12/13 - 
	Think I now have :
		A basic WCF service running, currently with one operation, AddArtefact, which persists the passed artefact
		using NHibernate. This service is run with a ServiceHost instance, constructed in and opened from another
		thread. Once the ServiceHost is opened, the thread simply loops, calling Thread.Sleep(200ish) until the
		boolean flag is set to exit. When the thread has been flagged and is exiting, it closes the ServiceHost
		instance before exiting.
			- ALl inside a lambda function inside a new Thread instance in ClientTest.cs. Move somewhere more appropriate & tidy up
		
		A basic WCF client proxy, constructed and controlled from the main thread. When AddArtefact is called
		on the proxy, the service implementation should be invoked.
		
		The exact state I just backed up in ArtefactService-131202-0430.tar.gz, still does not succeed when the proxy's method is called -
		For the majority of today up until just now the call to the proxy cause an exception to be thrown on the client 
		that said the server had an internal service error, and nothing else
			- Figured there was probably an unhandled exception being thrown on the server
			- The ServiceHost thread code was already wrapped in a try catch finally block, and I don't think it's caught any, and probably won't
			- Where the exception needs to be, and is now being, caught, in this case is in the server's implementaiton of AddArtefact
			  (and likewise for any other service operations / methods that are implemented by the service)
				- The method gets invoked by the channel, so there is user code that will be higher in the stack frame
				  And so the code of AddArtefact and any other service methods you implement, must be wrapped
				  in a try catch finally block
				  
 TODO: 
  See if you acttuallly need the thread running the server -
  Now that you realised the server's exceptions had to be caught within each service operation method (which gets invoked
  using refelection by the system) and have done that, it might actually work fine if you go back to the single threaded approach
  you had previously. Whole application is surrounded by a using (ServiceHost sh = ....), inside this is a try block which calls
  sh.Open(), catch, finally calls sh.Close(). ServiceHost must run a whole separate Process containing threads that listen on the configured channels