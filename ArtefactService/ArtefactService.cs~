using System;
using System.Collections.Generic;
using System.Collections.Concurrent;
using System.Linq;
using System.Linq.Expressions;
using System.Runtime.Serialization;
using System.ServiceModel;
using System.ServiceModel.Description;
using System.ServiceModel.Dispatcher;
using WCFChannel = System.ServiceModel.Channels;
using System.Reflection;
using System.Diagnostics;

using Serialize.Linq;
using Serialize.Linq.Extensions;
using Serialize.Linq.Nodes;

using NHibernate;
using NHibernate.Cfg;
using NHibernate.Linq;
using NHibernate.Criterion;

namespace Artefacts.Services
{
	/// <summary>
	/// Artefact repository
	/// </summary>
	/// <remarks>
	///	-	Removed parameters of <see cref="ServiceBehaviourAttribute"/>:
	///			MaxItemsInObjectGraph=100,
	///			ReleaseServiceInstanceOnTransactionComplete=false)]
	/// </remarks>
	[ServiceBehavior(
		IncludeExceptionDetailInFaults=true,
		InstanceContextMode=InstanceContextMode.Single,
		ConcurrencyMode=ConcurrencyMode.Single)]
	public class ArtefactService :
		IRepository<Artefact>
	{
//		#region Static members (store and return Type arrays for WCF service known types)
//		private static List<Type> _artefactTypes = null;
//		public static List<Type> ArtefactTypes {
//			get
//			{
//				return _artefactTypes != null ? _artefactTypes : _artefactTypes = new List<Type>();
//			}
//		}
//		public static Type[] GetArtefactTypes(ICustomAttributeProvider provider)
//		{
//			ServiceKnownTypeAttribute[] staticKnownTypes = provider == null ?
//				new ServiceKnownTypeAttribute[] {} :
//				(ServiceKnownTypeAttribute[])provider.GetCustomAttributes(typeof(ServiceKnownTypeAttribute), true);
//			ServiceKnownTypeAttribute[] hardcodeKnownTypes = new ServiceKnownTypeAttribute[]
//			{
//				new ServiceKnownTypeAttribute(typeof(NhQueryable<Artefact>))
//			};
//			Type[] knownTypes = new Type[ArtefactTypes.Count + staticKnownTypes.Length + hardcodeKnownTypes.Length];
//			Array.ConvertAll<ServiceKnownTypeAttribute, Type>(staticKnownTypes,
//				(input) => input.Type).CopyTo(knownTypes, 0);
//			Array.ConvertAll<ServiceKnownTypeAttribute, Type>(hardcodeKnownTypes,
//				(input) => input.Type).CopyTo(knownTypes, staticKnownTypes.Length);
//			ArtefactTypes.CopyTo(knownTypes, hardcodeKnownTypes.Length);
//			return knownTypes;
//		}
//		#endregion
		
		#region Private fields
//		private IDictionary<Type, IRepository> _repositories;
		private ISession _session;
		private Dictionary<int, QueryResult> _queryResultCache;
		private PagingOptions _defaultPagingOptions;
		#endregion
		
		public ITransaction Transaction {
			get
			{
				return Session.Transaction;
			}
		}
		
		internal ISession Session {
			get
			{
				ISession ret = _session != null && _session.IsOpen ? _session : _session = NhBootStrap.Session;
				if (ret == null)
					throw new NullReferenceException("ArtefactService.Session == null");
				return ret;
			}
		}

		public ArtefactService()
		{
//			_repositories = new ConcurrentDictionary<Type, IRepository>();
//			AddRepository(this);
			
			_defaultPagingOptions = new PagingOptions() { PageSize = 10, StartIndex = 0 };
			_queryResultCache = new Dictionary<int, QueryResult>();
			_session = null;
//			Transaction = null;
		}

		#region IRepository[Artefact] implementation
		
		#region Add/Get/Update/Remove singular artefact operations
		public int Add(Artefact artefact)
		{
			ITransaction transaction = null;
			try
			{
				if (Session.Transaction == null || !Session.Transaction.IsActive)
					transaction = Session.BeginTransaction();
				int id = (int)Session.Save(artefact);
				if (transaction != null)
					transaction.Commit();
				return id;
			}
			catch (Exception ex)
			{
				if (transaction != null)
					transaction.Rollback();
				throw Error(ex, new KeyValuePair<string, object>("artefact", artefact));
			}
			finally
			{
				if (transaction != null)
					transaction.Dispose();
			}
		}

		public int GetId(Artefact artefact)
		{
			try
			{
				return (int)Session.GetIdentifier(artefact);
			}
			catch (Exception ex)
			{
				throw Error(ex, new KeyValuePair<string, object>("artefact", artefact));
			}
		}

		public Artefact GetById(int id)
		{
			try
			{
				return Session.Get<Artefact>(id);
			}
			catch (Exception ex)
			{
				throw Error(ex, new KeyValuePair<string, object>("id", id));
			}
		}

		public void Update(Artefact artefact)
		{
			ITransaction transaction = null;
			try
			{
				if (Session.Transaction == null || !Session.Transaction.IsActive)
					transaction = Session.BeginTransaction();
				Update(artefact);
				if (transaction != null)
					transaction.Commit();
			}
			catch (Exception ex)
			{
				if (transaction != null)
					transaction.Rollback();
				throw Error(ex, new KeyValuePair<string, object>("artefact", artefact));
			}
			finally
			{
				if (transaction != null)
					transaction.Dispose();
			}
		}

		public void Remove(Artefact artefact)
		{
			ITransaction transaction = null;
			try
			{
				if (Session.Transaction == null || !Session.Transaction.IsActive)
					transaction = Session.BeginTransaction();
				Session.Delete(artefact);
				if (transaction != null)
					transaction.Commit();
			}
			catch (Exception ex)
			{
				if (transaction != null)
					transaction.Rollback();
				throw Error(ex, new KeyValuePair<string, object>("artefact", artefact));
			}
			finally
			{
				if (transaction != null)
					transaction.Dispose();
			}
		}
		#endregion
		
		#region Collections/Enumerables/Queryables
		[OperationContract]
		public IQueryable<TArtefact> Query(PagingOptions pagingOptions = null)
		{
			if (pagingOptions == null)
				pagingOptions = _defaultPagingOptions;
		}
		#endregion
		
		#region Get/Set default paging options
		public PagingOptions GetDefaultPagingOptions()
		{
			throw new NotImplementedException();
		}

		public void SetDefaultPagingOptions(PagingOptions pagingOptions)
		{
			throw new NotImplementedException();
		}
		#endregion
		
		#endregion
		
		/// <summary>
		/// Construct a <see cref="FaultException"/> describing the server side exception <paramref name="ex"/> for
		/// communication to a client.
		/// </summary>
		/// <param name="ex">The exception that occurred on the server</param>
		/// <param name="details">Optional arbitrary data associated with the exception</param>
		/// <remarks>
		/// Have been playing around with this a little, to see what can be passed back to the clients. Unsuccessful
		/// in transmitting inner exceptions and data dictionary in any exceptions. Not sure why. Does transmit the top
		/// level exception (except for data dictionary) back to the client correctly, which will do for now.
		/// 	-	Will look into these issues some point. Without inner exceptions debugging server code can be difficult.
		///		(Server does, however, write exceptions, including inner exceptions, to console for now for debug purposes)
		/// </remarks>
		private FaultException Error(Exception ex, params object[] details)
		{
			StackFrame errorFrame = new StackFrame(1, true);
			Console.WriteLine("{0}.{1} [{2}:{3},{4}]: Exception: {5}\n{6}\n",
				errorFrame.GetMethod().DeclaringType, errorFrame.GetMethod().Name, errorFrame.GetFileName(),
				errorFrame.GetFileLineNumber(), errorFrame.GetFileColumnNumber(), ex.GetType().FullName, ex.ToString());
			
			int di = 0;
			foreach (object d in details)
			{
				if (typeof(KeyValuePair<string, object>).IsAssignableFrom(d.GetType()))
					ex.Data.Add(((KeyValuePair<string, object>)d).Key, ((KeyValuePair<string, object>)d).Value);
				else
					ex.Data.Add("Detail-" + (di++).ToString(), d);
			}
			
			FaultException<ExceptionDetail> retEx = new FaultException<ExceptionDetail>(
				new ExceptionDetail(ex),
				new FaultReason(string.Format("Fault exception: {0}: {1}", ex.GetType().Name, ex.Message)),
				new FaultCode(ex.GetType().Name, ex.GetType().Namespace),
				OperationContext.Current.IncomingMessageHeaders.Action);
			retEx.Data.Add("_innerException", ex);
			
			return retEx;							
		}
	}
}

//		#region IArtefactRepository<Artefact>[Artefacts.Artefact] implementation
//		public PagingOptions GetDefaultPagingOptions()
//		{
//			return _defaultPagingOptions;
//		}
//		
//		public void SetDefaultPagingOptions(PagingOptions pagingOptions)
//		{
//			_defaultPagingOptions = pagingOptions;
//		}
//
//		public int Add(Artefact artefact)
//		{
//			using (ITransaction _trans = Session.BeginTransaction())
//			{
//				try
//				{
//					int id = (int)Session.Save(artefact);
//					_trans.Commit();
//					return id;
//				}
//				catch (Exception ex)
//				{
//					_trans.Rollback();
//					throw Error(ex, new KeyValuePair<string, object>("artefact", artefact));
//				}
//			}
//		}
//
//		public int GetId(Artefact artefact)
//		{
//			try
//			{
//				return (int)Session.GetIdentifier(artefact);
//			}
//			catch (Exception ex)
//			{
//				throw Error(ex, new KeyValuePair<string, object>("artefact", artefact));
//			}
//		}
//
//		public Artefact GetById(int id)
//		{
//			try
//			{
//				return Session.Get<Artefact>(id);
//			}
//			catch (Exception ex)
//			{
//				throw Error(ex, new KeyValuePair<string, object>("id", id));
//			}
//		}
//		
//		public IEnumerable<Artefact> GetAll()
//		{
//			try
//			{
//				return Session.Query<Artefact>().AsEnumerable();
//				//.ToList();
//			}
//			catch (Exception ex)
//			{
//				throw Error(ex);
//			}
//		}
////				IMultiQuery q = Session.CreateMultiQuery()
////					.Add("Count", @"select count(a.Id) from Artefact a")
////					.Add("Artefacts", @"select a.Id from Artefact a");
////				IQueryable<Artefact> query = <Artefact>();
////				List<Artefact> retArtefacts = query.ToList();
////				return retArtefacts;
//
//		public Artefact[] RunLinq(ExpressionNode exNode)
//		{
//			try
//			{
//				Expression<Func<Artefact, bool>> expression = exNode.ToExpression<Func<Artefact, bool>>();
//				IQueryable<Artefact> q = Session.Query<Artefact>().Where(expression);
//				Artefact[] results = q.ToArray();
//				return results;
//			}
//			catch (Exception ex)
//			{
//				throw Error(ex);
//			}
//		}
//		
//		public QueryResult RunQuery(Func<Artefact, bool> queryFunc, PagingOptions pagingOptions = null)
//		{
//			try
//			{
//				if (pagingOptions == null)
//					pagingOptions = _defaultPagingOptions;
//				int queryId = queryFunc.GetHashCode();
//				if (!_queryResultCache.ContainsKey(queryId))
//					_queryResultCache.Add(queryId,
//						new QueryResult(null)		//this)
//					{
//						PageSize = pagingOptions.PageSize
//	//					TotalCount = 
//					});
//	//			Session.CreateMultiQuery().
//				IEnumerable<Artefact> q = Session.Query<Artefact>().Where(queryFunc);		//a => true);
//				QueryResult queryResult = _queryResultCache[queryId];
//				queryResult.TotalCount = q.Count();
//				int[] resultIds = q.Select<Artefact, int>(a => a.Id.Value).ToArray();
//				queryResult.SetArtefactIds(resultIds);
//				return queryResult;
//			}
//			catch (Exception ex)
//			{
//				throw Error(ex);
//			}
//		}
//		
//		public void Update(Artefact artefact)
//		{
//			using (ITransaction _trans = Session.BeginTransaction())
//			{
//				try
//				{
//					Session.Update(artefact);
//				}
//				catch (Exception ex)
//				{
//					throw Error(ex, new KeyValuePair<string, object>("artefact", artefact));
//				}
//			}
//		}
//
//		public void Remove(Artefact artefact)
//		{
//			using (ITransaction _trans = Session.BeginTransaction())
//			{
//				try
//				{
//					Session.Delete(artefact);
//				}
//				catch (Exception ex)
//				{
//					throw Error(ex, new KeyValuePair<string, object>("artefact", artefact));
//				}
//			}
//		}
//		#endregion

