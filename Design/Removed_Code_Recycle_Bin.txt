//31/1/14 on
//--------------------

RepositoryClientProxy.cs
//Expression expression = 
//				Expression.Call(typeof(LinqExtensionMethods), "Query", new Type[] { typeof(Artefact) },
//				Expression.Call(typeof(ArtefactRepository).GetProperty("Session", BindingFlags.Public | BindingFlags.Static).GetGetMethod()));
//			//				(Queryable<Artefact>)QueryProvider.CreateQuery<Artefact>(expression);

ClientExpressionVisitor.cs
//
//		public Expression Visit(Expression exp, out bool isCountExpression)
//		{
//			isCountExpression = this.IsCountExpression;
//			Expression translatedExpression = base.Visit(exp);
//			isCountExpression = this.IsCountExpression;
//		}		
//		protected override Expression VisitMethodCall(MethodCallExpression m)
//		{
//			using (IDisposable vmsu = new VisitationMethodStackUpdater(VisitStack, m))
//			{
//				if (VisitStack.Count == 1 && m.Arguments.Count == 0 && m.Method.Name == "Count"
//					&& typeof(IEnumerable).IsAssignableFrom(m.Method.DeclaringType)
//					&& typeof(long).IsAssignableFrom(m.Method.ReturnType))
//				{
//					IsCountExpression = true;
//					return base.Visit(m.Object);
//				}
//				return base.VisitMethodCall(m);
//			}
//		}
//

ClientQueryProvider.cs

//			if (expression.IsMethodCallExpression())
//			{
//				MethodCallExpression mce = (MethodCallExpression)expression;
//				if (mce.Arguments.Count == 1 && typeof(IEnumerable).IsAssignableFrom(mce.Arguments[0].Type)
//				    && (!typeof(IEnumerable).IsAssignableFrom(expression.Type)))
//					return Repository.QueryMethodCall(mce.Arguments[0].Id(), mce.Method.DeclaringType.FullName + ":" + mce.Method.Name);
//				else
//					throw new ArgumentOutOfRangeException("expression", expression, "Unsupported MethodCallExpression");
//			}
//			else
//				throw new ArgumentOutOfRangeException("expression", expression, "Could not execute expression");
//		}
//				 && (typeof(int).IsAssignableFrom(expression.Type) || typeof(long).IsAssignableFrom(expression.Type)))
//					mce.Method.Name.Equals("Count"))
//					return Repository.QueryCount(((MethodCallExpression)expression).Arguments[0].Id());
//				else
//					throw new InvalidOperationException("Invalid expression " + expression.ToString());
//			}
//			else if (typeof(Artefact).IsAssignableFrom(expression.Type))
//				return Repository.QueryResult(expression.Id());
//			else
//				throw new Exception("This shouldn't happen: expression = " + expression.ToString());
//				return Repository.CreateQuery(expression.Id());
//
//
//
//			return (TResult)Convert.ChangeType(Execute(expression), typeof(TResult));
//			if (typeof(TResult) == typeof(Int32))
//			{
//				ExpressionNode en = expression.ToExpressionNode();
//				MemoryStream ms = new MemoryStream();
//				System.Runtime.Serialization.Formatters.Binary.BinaryFormatter bf = new System.Runtime.Serialization.Formatters.Binary.BinaryFormatter();
//				bf.Serialize(ms, en);
//				string s = Convert.ToBase64String(ms.GetBuffer(), Base64FormattingOptions.InsertLineBreaks);
//				object queryId = _repo.CreateQuery_EN_Binary(ms.GetBuffer());
//				int count = _repo.QueryCount(queryId);
//				return (TResult)Convert.ChangeType(count, typeof(TResult));
//			}
//			else if (typeof(Artefact).IsAssignableFrom(typeof(TResult)))
//			{
//				return (TResult)
//			}
//				throw new NotSupportedException();
//
//
//		private System.Linq.Expressions.Expression PrepareExpression(System.Linq.Expressions.Expression expression)
//		{
//			BindingFlags bf =
//				BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.FlattenHierarchy |
//				BindingFlags.GetField | BindingFlags.GetProperty | BindingFlags.Instance | BindingFlags.Static;
//			
//			if (expression is System.Linq.Expressions.MethodCallExpression)
//			{
//				System.Linq.Expressions.MethodCallExpression mce = (System.Linq.Expressions.MethodCallExpression)expression;
//				List<System.Linq.Expressions.Expression> newArgs = new List<System.Linq.Expressions.Expression>();
//				foreach (System.Linq.Expressions.Expression arg in mce.Arguments)
//					newArgs.Add(PrepareExpression(arg));
//				return System.Linq.Expressions.Expression.Call(mce.Method, newArgs);
//			}
//			else if (expression is System.Linq.Expressions.UnaryExpression)
//			{
//				System.Linq.Expressions.UnaryExpression ue = (System.Linq.Expressions.UnaryExpression)expression;
//				return System.Linq.Expressions.Expression.MakeUnary(ue.NodeType, ue.Operand, ue.Type, ue.Method);
//			}
//			else if (expression is System.Linq.Expressions.BinaryExpression)
//			{
//				System.Linq.Expressions.BinaryExpression be = (System.Linq.Expressions.BinaryExpression)expression;
//				return System.Linq.Expressions.Expression.MakeBinary(be.NodeType, be.Left, be.Right);
//			}
//			else if (expression is System.Linq.Expressions.MemberExpression)
//			{
//				System.Linq.Expressions.MemberExpression me = (System.Linq.Expressions.MemberExpression)expression;	// this one def not going to work
//				return System.Linq.Expressions.Expression.Constant(me.Member.DeclaringType.InvokeMember(me.Member.Name, bf, null, me.Expression, new object[] { }));
//			}
//			else
//				return expression;
//		}

ArtefactRepository.cs
//					Expression.Call(typeof(LinqExtensionMethods), "Query", new Type[] { typeof(Artefact) }, 
//					Expression.Call(typeof(ArtefactRepository).GetProperty("Session", BindingFlags.Public | BindingFlags.Static).GetGetMethod()))),
//					this);
//					Expression.Property(null, "Session")), this);			
//				Session.Query<Artefact>();
//				new QueryableNhProxy<Artefact>((NhQueryable<Artefact>)_nhQueryProvider.CreateQuery<Artefact>(
//					Expression.Call(typeof(LinqExtensionMethods), "Query", new Type[] { typeof(Artefact) }, 				
//				Expression.Call(typeof(ArtefactRepository).GetProperty("Session", BindingFlags.Public | BindingFlags.Static).GetGetMethod()))), this);
//					Expression.Property(null, "Session"))), this);
//				QueryableNhProxy
//				new Artefacts.Services.Queryable<Artefact>(_nhQueryProvider, this, Expression.Constant(Session.Query<Artefact>(), typeof(System.Linq.IQueryable<Artefact>)));
//				new QueryableNhProxy<Artefact>((NhQueryable<Artefact>) _nhQueryProvider.CreateQuery<Artefact>(// new Queryable<Artefact>(_nhQueryProvider, this, )
//				Expression.Call(typeof(LinqExtensionMethods), "Query", new Type[] { typeof(Artefact) },
//				Expression.Call(typeof(ArtefactRepository).GetProperty("Session", BindingFlags.Public | BindingFlags.Static).GetGetMethod()))), this);
//				Expression.Property(null, "Session")));
	

//--------------------

				//** REMOVE - ...?! **/

Artefact.cs
//		public static Type[] GetArtefactTypes(ICustomAttributeProvider provider)
//		{
//			ServiceKnownTypeAttribute[] staticKnownTypes = (ServiceKnownTypeAttribute[])
//				provider.GetCustomAttributes(typeof(ServiceKnownTypeAttribute), true);
//			Type[] knownTypes = new Type[ArtefactTypes.Count + staticKnownTypes.Length];
//			Array.ConvertAll<ServiceKnownTypeAttribute, Type>(staticKnownTypes, (input) => input.Type).CopyTo(knownTypes, 0);
//			ArtefactTypes.CopyTo(knownTypes, staticKnownTypes.Length);
//			return knownTypes;
//		}
		

ClientTest.cs
//				RunTest("Artefact[] RunLinq()", () =>
//					#region Test method
//				{
//					Expression<Func<Artefact, bool>> query = a => a.TimeCreated > new DateTime(2013, 12, 21, 7, 44, 40);
//					ExpressionNode exNode = query.ToExpressionNode();
//					Artefact[] artefacts = _repoProxy.RunLinq(exNode);
//					Console.WriteLine("{0} artefacts returned", artefacts.Length);
//					foreach (Artefact artefact in artefacts)
//						Console.WriteLine(artefact.ToString());
//				});
//					#endregion
				
//				RunTest("IQueryable<Artefact> GetAll() (NHibernate ISession.Query<>)", () =>
//					#region Test method
//				{
//					IEnumerable<Artefact> artefacts = _repoProxy.GetAll();
//					Console.WriteLine("{0} artefacts returned", artefacts.Count());
//					foreach (Artefact artefact in artefacts)
//						Console.WriteLine(artefact.ToString());
//				});
//					#endregion

////		[ClientTestMethod(Order=2, Name="DetachedCriteria.For<Artefact>()")]
//		private static void TestQueryArtefactsDetached()
//		{
//			DetachedCriteria criteria = DetachedCriteria.For<Artefact>().Add(Restrictions.Where<Artefact>(a => a.Id > 512));
//			
//			object qId = _clientProxy.CreateQueryCrit(criteria);
//			Console.WriteLine("queryId={0}, Count={1}", qId, _clientProxy.QueryCount(qId));
//			foreach (Artefact artefact in _clientProxy.QueryResults(qId))
//				Console.WriteLine(artefact.ToString());
//		}
//		

////		[ClientTestMethod(Order=3, Name="RepositoryClientProxy<Artefact>.CreateQuery_HQL()")]
//		private static void TestQueryArtefactsHQL()
//		{
//			string hql = "select Directory from Directory d inner join d.Drive";
//			object qId = _clientProxy.CreateQuery_HQL(hql);
//			Console.WriteLine("queryId={0}, Count={1}", qId, _clientProxy.QueryCount(qId));
//			foreach (Artefact artefact in _clientProxy.QueryResults(qId))
//				Console.WriteLine(artefact.ToString());
//		}
		
ArtefactService.cs

		class ArtefactServiceDataContractSerializerOperationBehaviour :
			DataContractSerializerOperationBehavior
		{
			public ArtefactServiceDataContractSerializerOperationBehaviour(OperationDescription operation) :
				base(operation)
			{
			}

			public override XmlObjectSerializer CreateSerializer(Type type, string name, string ns, System.Collections.Generic.IList<Type> knownTypes)
			{
				List<Type> _knownTypes = new List<Type>(knownTypes);
				_knownTypes.AddRange(ArtefactService.ArtefactTypes);
				return base.CreateSerializer(type, name, ns, _knownTypes);
			}

			public override XmlObjectSerializer CreateSerializer(Type type, System.Xml.XmlDictionaryString name, System.Xml.XmlDictionaryString ns, System.Collections.Generic.IList<Type> knownTypes)
			{
				List<Type> _knownTypes = new List<Type>(knownTypes);
				_knownTypes.AddRange(ArtefactService.ArtefactTypes);
				return base.CreateSerializer(type, name, ns, _knownTypes);
			}
		}
		
		class ArtefactServiceDataContractSerializerOperationBehaviour :
			DataContractSerializerOperationBehavior
		{
			public ArtefactServiceDataContractSerializerOperationBehaviour(OperationDescription operation) :
				base(operation)
			{
			}

			public override XmlObjectSerializer CreateSerializer(Type type, string name, string ns, System.Collections.Generic.IList<Type> knownTypes)
			{
				List<Type> _knownTypes = new List<Type>(knownTypes);
				_knownTypes.AddRange(ArtefactService.ArtefactTypes);
				return base.CreateSerializer(type, name, ns, _knownTypes);
			}

			public override XmlObjectSerializer CreateSerializer(Type type, System.Xml.XmlDictionaryString name, System.Xml.XmlDictionaryString ns, System.Collections.Generic.IList<Type> knownTypes)
			{
				List<Type> _knownTypes = new List<Type>(knownTypes);
				_knownTypes.AddRange(ArtefactService.ArtefactTypes);
				return base.CreateSerializer(type, name, ns, _knownTypes);
			}
		}
		
				#region IArtefactService implementation
		public Uri GetRepositoryAddress<TArtefact>()
			where TArtefact : Artefact
		{
			ServiceEndpoint endpoint = OperationContext.Current.Host.Description.Endpoints.Find(typeof(IArtefactRepository<TArtefact>));
			return endpoint == null ? new Uri(string.Empty) : endpoint.Address.Uri;
		}
		
		public void AddRepository(IRepository repository)
		{
//			Type TArtefactRepo = repository.GetType().GetInterface("IArtefactRepository<Artefact>`1");
//			Type TElement = TArtefactRepo.GetElementType();
			_repositories.Add(repository.GetType().GetInterface("IArtefactRepository`1").GetGenericArguments()[0], repository);
		}

		public void AddTypedRepository<TArtefact>(IArtefactRepository<TArtefact> repository)
			where TArtefact : Artefact
		{
			_repositories.Add(typeof(TArtefact), repository);
		}
		
//		public Guid GetSessionId()
//		{
//			return Session.GetSessionImplementation().SessionId;
//		}
//		
//		public long GetSessionTimestamp()
//		{
//			return Session.GetSessionImplementation().Timestamp;
//		}

		public void BeginTransaction()
		{
			if (Transaction == null)
				Session.BeginTransaction();
//			Transaction = 
			else if (!Transaction.IsActive)
				Transaction.Begin();
			else
				throw new TransactionException("Transaction is already active");
		}
		
		public void EndTransaction(bool commit)
		{
			if (Transaction == null)
				throw new TransactionException("Current transaction does not exist");
			else if (!Transaction.IsActive)
				throw new TransactionException("Current transaction is not active");
			if (commit)
				Transaction.Commit();
			else
				Transaction.Rollback();
			Transaction.Dispose();
//			Transaction = null;
		}
		#endregion
		
		//			var r = (from a in _clientProxy.Artefacts
//				where a.TimeCreated.Ticks > new DateTime(2013, 12, 21, 7, 44, 40).Ticks
////			         orderby a.TimeCreated
//				select a);
//					r.ArtefactRepository = _repoProxy;
//			Expression<Func<Artefact, bool>> expr = artefact => artefact.TimeCreated.Ticks > new DateTime(2014, 01, 03, 12, 12, 12).Ticks;
			Func<IQueryable<Artefact>, IQueryable<Artefact>> myFunc = artefacts => artefacts.Where(a => a.Id > 2);
			byte[] b = myFunc.Method.GetMethodBody().GetILAsByteArray();
//			var q = 
//					from a2 in (from a in _clientProxy.Artefacts where a.Id > 2 select a) where a2.TimeCreated > DateTime.MinValue select a2;
			
						object res = _clientProxy.CreateQueryIL(b);
